pip install spotipy
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

# Set up Spotify API credentials
CLIENT_ID = 'your_client_id'
CLIENT_SECRET = 'your_client_secret'

sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id=CLIENT_ID, client_secret=CLIENT_SECRET))import pandas as pd

# Function to get song features
def get_song_features(track_id):
    features = sp.audio_features([track_id])[0]
    return {
        "id": track_id,
        "danceability": features["danceability"],
        "energy": features["energy"],
        "key": features["key"],
        "loudness": features["loudness"],
        "mode": features["mode"],
        "speechiness": features["speechiness"],
        "acousticness": features["acousticness"],
        "instrumentalness": features["instrumentalness"],
        "liveness": features["liveness"],
        "valence": features["valence"],
        "tempo": features["tempo"]
    }

# Example usage
track_ids = ["spotify_track_id_1", "spotify_track_id_2"]  # Add track IDs
songs_data = [get_song_features(track_id) for track_id in track_ids]
df = pd.DataFrame(songs_data)pip install scikit-surprisefrom surprise import SVD, Dataset, Reader
from surprise.model_selection import train_test_split

# Sample data: user-song interaction
data = pd.DataFrame({
    'user_id': ['user1', 'user2', 'user1', 'user3', 'user4'],
    'song_id': ['song1', 'song2', 'song3', 'song4', 'song1'],
    'rating': [5, 4, 5, 2, 3]
})

# Prepare data for Surprise
reader = Reader(rating_scale=(1, 5))
dataset = Dataset.load_from_df(data[['user_id', 'song_id', 'rating']], reader)
trainset, testset = train_test_split(dataset, test_size=0.2)

# Train collaborative filtering model
model = SVD()
model.fit(trainset)

# Make predictions
predictions = model.test(testset)

# Recommend songs
def recommend(user_id, num_recommendations=5):
    song_ids = data['song_id'].unique()
    predictions = [model.predict(user_id, song_id) for song_id in song_ids]
    predictions.sort(key=lambda x: x.est, reverse=True)
    return [pred.iid for pred in predictions[:num_recommendations]]

# Example recommendation for a user
user_recommendations = recommend('user1')
print(user_recommendations)
model.fit
